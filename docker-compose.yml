version: '3.8'
services:
  
  #Build MySQL image
  mysql:
    image: spring-petclinic-mysql:5.7
    build:
      context: ./docker/mysql
    container_name: spring-petclinic-mysql
    networks:
      spring-petclinic-net:
        aliases:
          - mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=petclinic
      - MYSQL_DATABASE=petclinic
  
  # Spring Boot Rest API Backend
  spring-petclinic-server:
    image: spring-petclinic-server:1.5.16
    build:
      context: ./docker/server
    container_name: spring-petclinic-server
    networks:
      spring-petclinic-net:
        aliases:
          - spring-petclinic-server
    ports:
      - "127.0.0.1:${SERVER_PORT:-8000}:8000"
    logging:
      driver: 'json-file'
      options:
        max-size: '2m'
        max-file: '5'
    environment:
      ELASTIC_APM_SERVER_URL: ${ELASTIC_APM_SERVER_URL}
      ELASTIC_APM_SECRET_TOKEN: ${ELASTIC_APM_SECRET_TOKEN}
      ELASTIC_APM_SPAN_FRAMES_MIN_DURATION: -1
      ELASTIC_APM_CAPTURE_BODY: all
      SERVER_PORT: ${SERVER_PORT:-8000}
      JAVA_PROFILE: ${JAVA_PROFILE:-hsqldb,spring-data-jpa}
      DATABASE_URL: jdbc:mysql://mysql:3306/petclinic?useUnicode=true
      DATABASE_USERNAME: petclinic
      DATABASE_PASSWORD: petclinic
      DATABASE_DRIVER: com.mysql.jdbc.Driver
      DATABASE_DIALECT: MYSQL
      DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect
      DATASOURCE_SCHEMA: classpath*:db/mysql/initDB.sql
      DATASOURCE_DATA: classpath*:db/mysql/populateDB.sql
      INITIALIZE_DB: "true"
      ELASTIC_APM_SERVICE_NAME: petclinic-spring
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://spring-petclinic-server:${SERVER_PORT:-8000}/"]
      interval: 10s
      retries: 10

  # ReactJS Front end
  # NodeJS Proxy for ReactJs front end
  spring-petclinic-client:
    build:
      context: ./docker/client
    image: spring-petclinic-client:1.5.16
    container_name: spring-petclinic-client
    networks:
      spring-petclinic-net:
        aliases:
          - spring-petclinic-client
    ports:
      - "127.0.0.1:${CLIENT_SERVER_PORT:-3000}:3000"
    logging:
      driver: 'json-file'
      options:
        max-size: '2m'
        max-file: '5'
    environment:
      ELASTIC_APM_SERVER_URL: ${ELASTIC_APM_SERVER_URL}
      ELASTIC_APM_SERVER_JS_URL: ${ELASTIC_APM_SERVER_URL}
      ELASTIC_APM_SECRET_TOKEN: ${ELASTIC_APM_SECRET_TOKEN}
      ELASTIC_APM_SERVICE_VERSION: 1.0.0
      ELASTIC_APM_SERVICE_NAME: petclinic-client
      ELASTIC_APM_CLIENT_SERVICE_NAME: petclinic-react
      API_SERVER: 'http://spring-petclinic-server:${SERVER_PORT:-8000}'
      SERVER_PORT: ${CLIENT_SERVER_PORT:-3000}
      NODE_ENV: production
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USER}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      PETCLINIC_INTERNAL_URL: "http://spring-petclinic-client:${CLIENT_SERVER_PORT:-3000}"
      PETCLINIC_EXTERNAL_URL: "http://localhost:${CLIENT_SERVER_PORT:-3000}"
      ADDRESS_SERVER: "http://spring-address-finder:5000"
    depends_on:
      - spring-petclinic-server
      - spring-address-finder
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://spring-petclinic-client:${CLIENT_SERVER_PORT:-3000}/"]
      interval: 10s
      retries: 10

  # Python API for Adress finder
  spring-address-finder:
    build:
      context: ./docker/address-finder
    image: spring-address-finder:1.5.16
    container_name: spring-address-finder
    networks:
      spring-petclinic-net:
        aliases:
          - spring-address-finder
    ports:
      - "127.0.0.1:${ADDRESS_FINDER_PORT:-5000}:5000"
    logging:
      driver: 'json-file'
      options:
        max-size: '2m'
        max-file: '5'
    environment:
      ELASTIC_APM_SERVER_URL: ${ELASTIC_APM_SERVER_URL}
      ELASTIC_APM_SECRET_TOKEN: ${ELASTIC_APM_SECRET_TOKEN}
      ELASTIC_APM_SERVICE_VERSION: 1.0.0
      ELASTIC_APM_SERVICE_NAME: petclinic-address-finder
      ELASTIC_APM_CLIENT_SERVICE_NAME: petclinic-react
      ELASTICSEARCH_USER: ${ELASTICSEARCH_USER}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}

  # Load generator for frontend
  spring-client-loadgen:
    build:
      context: ./docker/client-loadgen
    image: spring-client-loadgen:1.5.16
    container_name: spring-client-loadgen
    networks:
      spring-petclinic-net:
        aliases:
          - spring-client-loadgen
    logging:
      driver: 'json-file'
      options:
        max-size: '2m'
        max-file: '5'
    environment:
      PETCLINIC_BASE_URL: http://spring-petclinic-client:${CLIENT_SERVER_PORT:-3000}
    depends_on:
      - spring-petclinic-client

  # Load generator for server
  spring-server-loadgen:
    build:
      context: ./docker/server-loadgen
    image: spring-server-loadgen:1.5.16
    container_name: spring-server-loadgen
    networks:
      spring-petclinic-net:
        aliases:
          - spring-server-loadgen
    logging:
      driver: 'json-file'
      options:
        max-size: '2m'
        max-file: '5'
    environment:
      ENDPOINT_PORT: 3000
      ENDPOINT_BASE: spring-petclinic-client
      ENDPOINT_PROTOCOL: http
      DATA_FILES: "/opt/data_files"
    depends_on:
      - spring-petclinic-client

networks:
  spring-petclinic-net:
    driver: bridge
volumes:
  esdata01:
    driver: local
